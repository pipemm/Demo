
name: Azure Lab
run-name: Lab Practice

on:
  workflow_dispatch:
    inputs:
      token:
        type: string
        description: Access Token
        required: true
      account_id:
        type: string
        description: Account ID
        required: true
      location:
        type: choice
        description: 'Location'
        required: false
        options:
          - 'default'
          - 'westus2'
          - 'southcentralus'
          - 'centralus'
          - 'eastus'
          - 'westeurope'
          - 'southeastasia'
          - 'japaneast'
          - 'brazilsouth'
          - 'australiasoutheast'
          - 'centralindia'

jobs:

  Create-an-Azure-Resource-using-scripts:
    runs-on: windows-2022
      ## https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
    environment: AzureLab

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        ## https://github.com/actions/checkout

      - name: Prepare
        shell: powershell
        run: |
          [System.String[]]$packages = @(
            ##'Az.Accounts',
            'Az.Resources',
            'Az'
          );
          [System.String[]]$skip = @(
            'Az'
          );
          ## https://www.powershellgallery.com/packages/Az/
          foreach ($azp in $packages)
          {
            if ( ${skip}.Contains("${azp}") ) {
              continue;
            }
            Install-Module -Name "${azp}" -Scope CurrentUser -Repository PSGallery -AllowClobber -Force;
          }
          foreach ($azp in $packages)
          {
            if ( ${skip}.Contains("${azp}") ) {
              continue;
            }
            Get-InstalledModule -Name "${azp}";
          }
          

      - name: Connect
        env:
          TOKEN : "${{ github.event.inputs.token }}"
          ID    : "${{ github.event.inputs.account_id }}"
        shell: powershell
        run: |
          [System.String]$Token = "${Env:TOKEN}";
          [System.String]$Id    = "${Env:ID}";
          [Microsoft.Azure.Commands.Profile.Models.Core.PSAzureProfile]$Profile=(Connect-AzAccount -AccessToken "${Token}" -AccountId "${Id}");
          Write-Output ${Profile};
          [System.String]$Expire = (Get-AzAccessToken).ExpiresOn.ToString('u');
          Write-Output "The session will expire at ${Expire}. "
          [Microsoft.Azure.Commands.Profile.Models.PSAzureSubscription[]]$Subscriptions = (Get-AzSubscription);
          Write-Output ${Subscriptions};
          if ( ${Subscriptions}.Count -eq 0 ) {
            Write-Error -Message 'There is no subscription. '
            exit 1;
          }

      - name: Get Resource Group Information
        shell: powershell
        run: |
          if ( "${Env:GITHUB_ENV}" -eq $null ) {
            [Microsoft.Azure.Commands.ResourceManager.Cmdlets.SdkModels.PSResourceGroup[]]$ResourceGroups = (Get-AzResourceGroup);
            Write-Output ${ResourceGroups}
            if ( ${ResourceGroups}.Count -gt 0 ) { 
              [System.String]$group = ${ResourceGroups}[0].ResourceGroupName;
              "GROUP_NAME=${group}" >> "${Env:GITHUB_ENV}"
              Get-Content -LiteralPath "${Env:GITHUB_ENV}"
            }
          }

          (Get-AzLocation);
      
      - name: Test
        working-directory: ./Azure/Lab/
        env:
          LOCATION: "${{ github.event.inputs.location }}"
        run: |
          ${Env:PASSWORD_DEFAULT}
          [System.String]                             $username   = 'Username';
          [System.Security.SecureString]              $password   = ('Password' | ConvertTo-SecureString -AsPlainText -Force);
          [System.Management.Automation.PSCredential] $credential = [System.Management.Automation.PSCredential]::New($username,$password);
          ${credential}.GetType().FullName;
          ${password}.GetType().FullName;

