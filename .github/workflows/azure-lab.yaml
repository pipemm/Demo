
name: Azure Lab
run-name: Lab Practice

on:
  workflow_dispatch:
    inputs:
      token:
        type: string
        description: Access Token
        required: true
      account_id:
        type: string
        description: Account ID
        required: true
      location:
        type: choice
        description: 'Location'
        required: false
        options:
          - 'default'
          - 'westus2'
          - 'southcentralus'
          - 'centralus'
          - 'eastus'
          - 'westeurope'
          - 'southeastasia'
          - 'japaneast'
          - 'brazilsouth'
          - 'australiasoutheast'
          - 'centralindia'

jobs:

  Create-an-Azure-Resource-using-scripts:
    runs-on: windows-2022
      ## https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
    environment: AzureLab

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        ## https://github.com/actions/checkout

      - name: Prepare
        shell: powershell
        run: |
          [System.String[]]$packages = @(
            ##'Az.Accounts',
            'Az.Resources',
            'Az'
          );
          [System.String[]]$skip = @(
            'Az'
          );
          ## https://www.powershellgallery.com/packages/Az/
          foreach ($azp in $packages)
          {
            if ( ${skip}.Contains("${azp}") ) {
              continue;
            }
            Install-Module -Name "${azp}" -Scope CurrentUser -Repository PSGallery -AllowClobber -Force;
          }
          foreach ($azp in $packages)
          {
            if ( ${skip}.Contains("${azp}") ) {
              continue;
            }
            Get-InstalledModule -Name "${azp}";
          }
          

      - name: Connect
        env:
          TOKEN : "${{ github.event.inputs.token }}"
          ID    : "${{ github.event.inputs.account_id }}"
        shell: powershell
        run: |
          [System.String]$Token = "${Env:TOKEN}";
          [System.String]$Id    = "${Env:ID}";
          [Microsoft.Azure.Commands.Profile.Models.Core.PSAzureProfile]$Profile=(Connect-AzAccount -AccessToken "${Token}" -AccountId "${Id}");
          Write-Output ${Profile};
          [System.String]$Expire = (Get-AzAccessToken).ExpiresOn.ToString('u');
          Write-Output "The session will expire at ${Expire}. "
          [Microsoft.Azure.Commands.Profile.Models.PSAzureSubscription[]]$Subscriptions = (Get-AzSubscription);
          Write-Output ${Subscriptions};
          if ( ${Subscriptions}.Count -eq 0 ) {
            Write-Error -Message 'There is no subscription. '
            exit 1;
          }

      - name: Get Resource Group Information and Determine Location
        working-directory: ./Azure/Lab/automate-azure-tasks-with-powershell/
        env:
          LOCATION : "${{ github.event.inputs.location }}"
        shell: powershell
        run: |
          .\\01_Get_Resource_Group_Information.ps1

      - name: Greate Linux Virtual Machines
        working-directory: ./Azure/Lab/automate-azure-tasks-with-powershell/
        env:
          VM_USERNAME  : "${{ secrets.USERNAME_DEFAULT }}"
          VM_PASSWORD  : "${{ secrets.PASSWORD_DEFAULT }}"
        run: |
          [System.Int32] $number_vm      = 3;
          [System.Int32] $port_ssh_open  = 22;
          [System.String]$image_vm       = 'Canonical:0001-com-ubuntu-server-focal:20_04-lts:latest';
          [System.String]$resource_group = "${Env:GROUP_NAME}";
          [System.String]$location_vm    = "${Env:LOCATION}";
          [System.String]                $username    =  "${Env:VM_USERNAME}";
          [System.Security.SecureString] $password    = ("${Env:VM_PASSWORD}" | ConvertTo-SecureString -AsPlainText -Force);
          [System.Management.Automation.PSCredential] $credential = [System.Management.Automation.PSCredential]::New(${username},${password});
          [System.String]                $username_vm = ${credential}.Username;
          Write-Output "Resource Group                     : ${resource_group}";
          Write-Output "Virtual Machine Location           : ${location_vm}";
          Write-Output "Virtual Machine Image              : ${image_vm}";
          Write-Output "Port for Secure Shell (Open)       : ${port_ssh_open}";
          Write-Output "Virtual Machine User Name          : ${username_vm}";
          Write-Output "Number of Machines to be disployed : ${number_vm}";

          [System.String]$prefix_vm = 'testvm';
          foreach( $n in 1..${number_vm} ){
            [System.String]$name_vm ="${prefix_vm}-${location_vm}-${n}"
            Write-Output "Deploying Virtual Machine : ${name_vm}";
          }
}

          

